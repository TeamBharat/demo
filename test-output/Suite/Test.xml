<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="IN-6D510F3" failures="0" tests="3" name="Test" time="0.14" errors="0" timestamp="2022-05-18T15:51:35 IST">
  <testcase classname="hooks.base" name="@BeforeMethod setUp" time="0.046">
    <failure type="java.lang.IllegalStateException" message="The driver executable does not exist: D:\Project-Repo\QAWorldCup\TestNG_demo\demo\demo\src\main\resources\driver\chromedriver.exe">
      <![CDATA[java.lang.IllegalStateException: The driver executable does not exist: D:\Project-Repo\QAWorldCup\TestNG_demo\demo\demo\src\main\resources\driver\chromedriver.exe
at com.google.common.base.Preconditions.checkState(Preconditions.java:585)
at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:146)
at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:141)
at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:35)
at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:159)
at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:355)
at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:94)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:123)
at hooks.base.setUp(base.java:111)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 31 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase classname="tests.Logintest" name="@AfterMethod tearDown" time="-1.65286929547E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="hooks.base" name="@AfterMethod getResult" time="-1.652869295472E9">
    <skipped/>
  </testcase> <!-- @AfterMethod getResult -->
  <testcase classname="hooks.base" name="@BeforeMethod setUp" time="-1.652869295475E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase classname="tests.Logintest" name="@AfterMethod tearDown" time="-1.652869295484E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="hooks.base" name="@AfterMethod getResult" time="-1.652869295486E9">
    <skipped/>
  </testcase> <!-- @AfterMethod getResult -->
  <testcase classname="hooks.base" name="@BeforeMethod setUp" time="-1.652869295489E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase classname="tests.Logintest" name="@AfterMethod tearDown" time="-1.652869295495E9">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="hooks.base" name="@AfterMethod getResult" time="-1.652869295497E9">
    <skipped/>
  </testcase> <!-- @AfterMethod getResult -->
  <testcase classname="hooks.base" name="@AfterTest afterEachTest" time="-1.652869295502E9">
    <skipped/>
  </testcase> <!-- @AfterTest afterEachTest -->
  <testcase classname="hooks.base" name="@AfterTest afterSuite" time="-1.652869295504E9">
    <skipped/>
  </testcase> <!-- @AfterTest afterSuite -->
  <testcase classname="tests.Logintest" name="addTemperature" time="0.0">
    <skipped/>
  </testcase> <!-- addTemperature -->
  <testcase classname="tests.Logintest" name="getDeviceCount" time="0.0">
    <skipped/>
  </testcase> <!-- getDeviceCount -->
  <testcase classname="tests.Logintest" name="minusTemperature" time="0.0">
    <skipped/>
  </testcase> <!-- minusTemperature -->
</testsuite> <!-- Test -->
